# -*- makefile-gmake -*-
#
# This is the main markdown makefile. Should be included by user
# makefiles (run 'markdown-makefile <document-name>' to get one).
#
# Required variables:
#    BASE - the name of your document, without file extension
#
# Optional variables:
#    STARTS_WITH_TEXT - set this (to anything) if the document begins
#        with text rather than a section header; it will fix a LaTeX
#        formatting problem.
#    ADDITIONAL_DICTIONARIES - by default, spell-checking uses the
#        Hunspell default personal dictionary ~/.hunspell_en_GB, plus
#        $(BASE).dic. Use this variable to specify additional
#        dictionaries.
#    EXTRA_PREPROCESSING_FLAGS - additional flags to pass to pandoc at
#        the preprocessing stage (input md -> generated md).
#    EXTRA_PANDOC_FLAGS - additional flags to pass to pandoc at the
#        main stage (generated md -> other formats).
#    EXTRA_LATEX_FLAGS - additional flags to pass to pandoc at the
#         main stage, for latex-based output (generated md -> tex/pdf).
#    EXTRA_DEPS - additional dependencies to consider when deciding
#        whether to rebuild the output.
#    EXTRA_CLEAN_DEPS - additional files to remove with 'make clean'.
#

ifndef BASE
$(error BASE must be set to the document name)
endif

PANDOC_VERSION=$(shell pandoc --version | grep '^pandoc')
ifneq ($(PANDOC_VERSION),pandoc 2.11.4)
$(warning "Unsupported pandoc version; expected 2.11.4, got $(PANDOC_VERSION)")
endif

# User-modifiable variables
STARTS_WITH_TEXT ?=
ADDITIONAL_DICTIONARIES ?=
EXTRA_PREPROCESSING_FLAGS ?=
EXTRA_PANDOC_FLAGS ?=
EXTRA_LATEX_FLAGS ?=
EXTRA_DEPS ?=
EXTRA_CLEAN_DEPS ?=

# Other variables
METADATA_GENERATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/generate-metadata.sh
METADATA_MS_GENERATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/generate-ms-metadata.sh
LATEX_TEMPLATE := $(MARKDOWN_MAKEFILE_DIR)/templates/template.tex
LATEX_HEADER := $(MARKDOWN_MAKEFILE_DIR)/templates/header.tex
LATEX_BEFORE := $(MARKDOWN_MAKEFILE_DIR)/templates/before.tex
EPUB_CSS := $(MARKDOWN_MAKEFILE_DIR)/templates/epub.css

OUT_DIR := output
SAVED_DIR := saved
OUT_BASE := $(OUT_DIR)/$(BASE)
METADATA := $(OUT_DIR)/_metadata.yaml
LATEX_HEADER_PROCESSED := $(OUT_DIR)/_header.tex
LATEX_BEFORE_PROCESSED := $(OUT_DIR)/_before.tex
DEPS := *.md $(OUT_DIR) $(EXTRA_DEPS) $(METADATA) $(LATEX_HEADER_PROCESSED) $(LATEX_BEFORE_PROCESSED)
METADATA_MS := $(OUT_DIR)/_metadata_ms.yaml

LATEX_FLAGS := --pdf-engine=xelatex --template=$(LATEX_TEMPLATE) --include-in-header=$(LATEX_HEADER_PROCESSED) --include-before-body=$(LATEX_BEFORE_PROCESSED)

LATEX_VARS := --variable=fontsize:12pt --variable=papersize:a4 --variable=documentclass:article --variable=geometry:a4paper --variable=strikeout --variable=verbatim-in-note --variable=linkcolor:black '--variable=mainfont:Times New Roman' --variable=indent
ifdef STARTS_WITH_TEXT
LATEX_VARS += --variable=starts-with-text
endif

.FORCE:

.PHONY: main all md txt tex pdf odt doc docx epub mobi md_ms docx_ms save spell gitignore clean .FORCE

main: pdf

all: md txt tex pdf odt doc docx epub mobi md_ms docx_ms

md: $(OUT_BASE).md

txt: $(OUT_BASE).txt

tex: $(OUT_BASE).tex

pdf: $(OUT_BASE).pdf

odt: $(OUT_BASE).odt

doc: $(OUT_BASE).doc

docx: $(OUT_BASE).docx

epub: $(OUT_BASE).epub

mobi: $(OUT_BASE).mobi

md_ms: $(OUT_BASE)_ms.md

docx_ms: $(OUT_BASE)_ms.docx

$(OUT_DIR):
	@mkdir -p $(OUT_DIR)

$(METADATA): $(OUT_DIR) .FORCE
	@$(METADATA_GENERATOR) $@

$(LATEX_HEADER_PROCESSED): $(OUT_DIR) .FORCE
	@echo | pandoc --template=$(LATEX_HEADER) $(LATEX_VARS) $(EXTRA_LATEX_FLAGS) $(EXTRA_PANDOC_FLAGS) -o $(LATEX_HEADER_PROCESSED)

$(LATEX_BEFORE_PROCESSED): $(OUT_DIR) .FORCE
	@echo | pandoc --template=$(LATEX_BEFORE) $(LATEX_VARS) $(EXTRA_LATEX_FLAGS) $(EXTRA_PANDOC_FLAGS) -o $(LATEX_BEFORE_PROCESSED)

# We do a separate 'preprocessing' step from md to md first, so that pandoc
# can run any filters *without* --smart enabled. Having filters and smart
# enabled at the same time can make ligatures get escaped later, whereas this
# ensures they're passed through correctly.
$(OUT_DIR)/%.md: %.md $(DEPS)
	@pandoc --from=markdown-smart --to=markdown-smart --standalone $(EXTRA_PREPROCESSING_FLAGS) -o $@ $< $(METADATA)

$(OUT_DIR)/%.txt: $(OUT_DIR)/%.md
	@pandoc --from=markdown+smart --to=plain --standalone $(EXTRA_PANDOC_FLAGS) -o $@ $<

$(OUT_DIR)/%.tex: $(OUT_DIR)/%.md
	@pandoc --from=markdown+smart --standalone $(LATEX_FLAGS) $(EXTRA_LATEX_FLAGS) $(LATEX_VARS) $(EXTRA_PANDOC_FLAGS) -o $@ $<

$(OUT_DIR)/%.pdf: $(OUT_DIR)/%.md
	@pandoc --from=markdown+smart $(LATEX_FLAGS) $(EXTRA_LATEX_FLAGS) $(LATEX_VARS) $(EXTRA_PANDOC_FLAGS) -o $@ $<

$(OUT_DIR)/%.odt: $(OUT_DIR)/%.md
	@pandoc --from=markdown+smart $(EXTRA_PANDOC_FLAGS) -o $@ $<

$(OUT_DIR)/%.doc: $(OUT_DIR)/%.docx
	@unoconv -f doc -o $@ $<

$(OUT_DIR)/%.docx: $(OUT_DIR)/%.md
	@pandoc --from=markdown+smart $(EXTRA_PANDOC_FLAGS) -o $@ $<

$(OUT_DIR)/%.epub: $(OUT_DIR)/%.md
	@pandoc --from=markdown+smart --css=$(EPUB_CSS) $(EXTRA_PANDOC_FLAGS) -o $@ $<

# Uses ebook-convert from Calibre
$(OUT_DIR)/%.mobi: $(OUT_DIR)/%.epub
	@ebook-convert $< $@

$(METADATA_MS): $(OUT_BASE).md
	@$(METADATA_MS_GENERATOR) $@ $<

$(OUT_DIR)/%_ms.md: $(OUT_DIR)/%.md $(METADATA_MS)
	@pandoc --from=markdown-smart --to=markdown-smart --standalone -o $@ $< $(METADATA_MS)

# Uses md2short.sh from https://github.com/prosegrinder/pandoc-templates
$(OUT_DIR)/%_ms.docx: $(OUT_DIR)/%_ms.md
	@md2short.sh --overwrite --modern -o $@ $<

save: all
	@rm -rf $(SAVED_DIR)
	@cp -a $(OUT_DIR) $(SAVED_DIR)

spell:
	@markdown-spellcheck $(BASE).dic $(ADDITIONAL_DICTIONARIES) < $(BASE).md

gitignore: .gitignore

.gitignore:
	@echo '*~' > .gitignore
	@echo '/output' >> .gitignore

clean:
	@rm -rf $(OUT_DIR) *~ $(EXTRA_CLEAN_DEPS)
